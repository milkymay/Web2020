package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.Setter;

import javax.sql.DataSource;
import java.sql.*;
import java.util.*;

public abstract class AbstractRepository<T> {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    public void save(T entity, String SQLRequest, Setter<T, PreparedStatement> statementSetter, Setter<T, ResultSet> entitySetter) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(SQLRequest, Statement.RETURN_GENERATED_KEYS)) {
                statementSetter.set(entity, statement);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + entity.getClass() + ".");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        entitySetter.set(entity, generatedKeys);
                    } else {
                        throw new RepositoryException("Can't save" + entity.getClass() + "[no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + entity.getClass() + ".", e);
        }
    }

    public T findBy(T entity, String SQLRequest, Setter<T, PreparedStatement> statementSetter) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(SQLRequest)) {
                statementSetter.set(entity, statement);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toEntity(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find.", e);
        }
    }

    public List<T> findAll(String SQLRequest) {
        List<T> entities = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(SQLRequest)) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    T entity;
                    while ((entity = toEntity(statement.getMetaData(), resultSet)) != null) {
                        entities.add(entity);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find.", e);
        }
        return entities;
    }

    public String generateInsertSQL(T entity, String args) {
        return "INSERT INTO `" + entity.getClass().getSimpleName() + "`" + args;
    }

    public String generateSelectSQL(T entity, String args) {
        return "SELECT * FROM `" + entity.getClass().getSimpleName() + "` WHERE " + args;
    }

    protected abstract T toEntity(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;

    protected List<T> filter(T entity, Setter<T, PreparedStatement> statementSetter, String SQLRequest) {
        List<T> entities = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(SQLRequest)) {
                statementSetter.set(entity, statement);
                try (ResultSet resultSet = statement.executeQuery()) {
                    T curEntity;
                    while ((curEntity = toEntity(statement.getMetaData(), resultSet)) != null) {
                        entities.add(curEntity);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find.", e);
        }
        Collections.reverse(entities);
        return entities;
    }


    public T update(T entity, Setter<T, PreparedStatement> statementSetter, String SQLRequest) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(SQLRequest)) {
                statementSetter.set(entity, statement);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toEntity(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't update.", e);
        }
    }
}